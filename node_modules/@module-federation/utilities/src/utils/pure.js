"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRuntimeRemotes = exports.loadScript = exports.extractUrlAndGlobal = exports.remoteVars = void 0;
const pure = typeof process !== 'undefined' ? process.env['REMOTES'] || {} : {};
exports.remoteVars = pure;
const extractUrlAndGlobal = (urlAndGlobal) => {
    const index = urlAndGlobal.indexOf('@');
    if (index <= 0 || index === urlAndGlobal.length - 1) {
        throw new Error(`Invalid request "${urlAndGlobal}"`);
    }
    return [urlAndGlobal.substring(index + 1), urlAndGlobal.substring(0, index)];
};
exports.extractUrlAndGlobal = extractUrlAndGlobal;
const loadScript = (keyOrRuntimeRemoteItem) => {
    const runtimeRemotes = (0, exports.getRuntimeRemotes)();
    // 1) Load remote container if needed
    let asyncContainer;
    const reference = typeof keyOrRuntimeRemoteItem === 'string' ? runtimeRemotes[keyOrRuntimeRemoteItem] : keyOrRuntimeRemoteItem;
    if (reference.asyncContainer) {
        asyncContainer =
            typeof reference.asyncContainer.then === 'function'
                ? reference.asyncContainer
                : // @ts-ignore
                    reference.asyncContainer();
    }
    else {
        // This casting is just to satisfy typescript,
        // In reality remoteGlobal will always be a string;
        const remoteGlobal = reference.global;
        // Check if theres an override for container key if not use remote global
        const containerKey = reference.uniqueKey
            ? reference.uniqueKey
            : remoteGlobal;
        const __webpack_error__ = new Error();
        // @ts-ignore
        if (!globalThis.__remote_scope__) {
            // create a global scope for container, similar to how remotes are set on window in the browser
            // @ts-ignore
            globalThis.__remote_scope__ = {
                // @ts-ignore
                _config: {},
            };
        }
        // @ts-ignore
        const globalScope = 
        // @ts-ignore
        typeof window !== 'undefined' ? window : globalThis.__remote_scope__;
        if (typeof window === 'undefined') {
            globalScope['_config'][containerKey] = reference.url;
        }
        else {
            // to match promise template system, can be removed once promise template is gone
            if (!globalScope['remoteLoading']) {
                globalScope['remoteLoading'] = {};
            }
            if (globalScope['remoteLoading'][containerKey]) {
                return globalScope['remoteLoading'][containerKey];
            }
        }
        // @ts-ignore
        asyncContainer = new Promise(function (resolve, reject) {
            function resolveRemoteGlobal() {
                const asyncContainer = globalScope[remoteGlobal];
                return resolve(asyncContainer);
            }
            if (typeof globalScope[remoteGlobal] !== 'undefined') {
                return resolveRemoteGlobal();
            }
            __webpack_require__.l(reference.url, function (event) {
                if (typeof globalScope[remoteGlobal] !== 'undefined') {
                    return resolveRemoteGlobal();
                }
                const errorType = event && (event.type === 'load' ? 'missing' : event.type);
                const realSrc = event && event.target && event.target.src;
                __webpack_error__.message =
                    'Loading script failed.\n(' +
                        errorType +
                        ': ' +
                        realSrc +
                        ' or global var ' +
                        remoteGlobal +
                        ')';
                __webpack_error__.name = 'ScriptExternalLoadError';
                __webpack_error__.type = errorType;
                __webpack_error__.request = realSrc;
                reject(__webpack_error__);
            }, containerKey);
        }).catch(function (err) {
            console.error('container is offline, returning fake remote');
            console.error(err);
            return {
                fake: true,
                // @ts-ignore
                get: (arg) => {
                    console.warn('faking', arg, 'module on, its offline');
                    return Promise.resolve(() => {
                        return {
                            __esModule: true,
                            default: () => {
                                return null;
                            },
                        };
                    });
                },
                //eslint-disable-next-line
                init: () => { },
            };
        });
        if (typeof window !== 'undefined') {
            globalScope['remoteLoading'][containerKey] = asyncContainer;
        }
    }
    return asyncContainer;
};
exports.loadScript = loadScript;
const getRuntimeRemotes = () => {
    return Object.entries(exports.remoteVars).reduce((acc, [key, value]) => {
        if (typeof value === 'object' && typeof value.then === 'function') {
            acc[key] = { asyncContainer: value };
        }
        else if (typeof value === 'function') {
            acc[key] = { asyncContainer: Promise.resolve(value()) };
        }
        else if (typeof value === 'string') {
            if (value.startsWith('internal ')) {
                const [request, query] = value.replace('internal ', '').split('?');
                if (query) {
                    const remoteSyntax = new URLSearchParams(query).get('remote');
                    if (remoteSyntax) {
                        const [url, global] = (0, exports.extractUrlAndGlobal)(remoteSyntax);
                        acc[key] = { global, url };
                    }
                }
            }
            else {
                const [url, global] = (0, exports.extractUrlAndGlobal)(value);
                acc[key] = { global, url };
            }
        }
        else {
            console.warn('remotes process', process.env['REMOTES']);
            throw new Error(`[mf] Invalid value received for runtime_remote "${key}"`);
        }
        return acc;
    }, {});
};
exports.getRuntimeRemotes = getRuntimeRemotes;
//# sourceMappingURL=pure.js.map